check_normality(mf22)
check_heteroscedasticity(mf22)
check_normality(mf22)
b22 <- boxcox(lm(controle$MRF+0.1 ~ 1))
lambda22 <- b22$x[which.max(b22$y)]
lambda22
controle$MRF22 <- (controle$MRF ^ lambda22 - 1)/ lambda22
controle$MRF22
mf2.2 <- lm(MRF22 ~ Trat,
data = controle)
anova(mf2.2)
summary(mf2.2)
anova(mf2.2)
check_normality(mf2.2)
check_heteroscedasticity(mf2.2)
mf4 <- lm(ovosg ~ Trat*factor(Dose),
data = controle)
anova(mf4)
anova(mf22)
hist(mf22$residuals)
shapiro.test(mf22$residuals)
theme_set(theme_bw())
library(tidyverse)
library(readxl)
library(gsheet)
library(performance)
library(DHARMa)
library(multcomp)
library(multcompView)
library(emmeans)
library(MASS)
library(AgroR)
library(drc)
library(corrplot)
library(patchwork)
theme_set(theme_bw())
library(tidyverse)
library(readxl)
library(gsheet)
library(performance)
library(DHARMa)
library(multcomp)
library(multcompView)
library(emmeans)
library(MASS)
library(AgroR)
library(drc)
library(corrplot)
library(patchwork)
controle <- read_excel("Controle biológico.xlsx")
controle
?ggplot2
controle %>%
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle %>%
ggplot(aes(x = factor(Dose),y = 'MPAS', color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle %>%
ggplot(aes(x = factor(Dose),y = 'MPAS', color = factor(Dose)))+
geom_jitter()+
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle %>%
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle |>
ggplot(aes(factor(Dose), MPAS))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)
controle |>
ggplot(aes(factor(Dose), MPAS))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_cl_boot", color = "black") #A bola preta representa a média e a linha o intervalo de confiança
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_cl_boot", color = "black") #A bola preta representa a média e a linha o intervalo de confiança
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_cl_boot") #A bola preta representa a média e a linha o intervalo de confiança
controle %>%
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_cl_boot") #A bola preta representa a média e a linha o intervalo de confiança
?stat_summary
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl") #A bola preta representa a média e a linha o intervalo de confiança
controle %>%
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl") #A bola preta representa a média e a linha o intervalo de confiança
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1)) #A bola preta representa a média e a linha o intervalo de confiança
controle %>%
group_by(Trat,Dose) %>%
summarise (mean_MPAS = mean(MPAS),
sd_MPAS = sd(MPAS),
n = n()) %>%
ggplot(aes(x = factor(Dose),y = mean_MPAS, color = factor(Dose)))+
geom_jitter()+
facet_wrap(~Trat)+
geom_errorbar(aes(ymin = mean_MPAS - sd_MPAS,
ymax = mean_MPAS + sd_MPAS),
width = 0.2)
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1)) #A bola preta representa a média e a linha o intervalo de confiança
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), MPAS))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
scale_fill_colorblind()+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), MPAS, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), MRF, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), ovos, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
controle |>
ggplot(aes(factor(Dose), ovosg, color = factor(Dose)))+
geom_jitter(width = 0.05, color = "gray70")+
facet_wrap(~Trat)+
stat_summary(fun.data = "mean_sdl", fun.args = list(mult = 1))
mf <- lm(MPAS ~ Trat*factor(Dose),
data = controle)
anova(mf)
summary(mf)
mf1 <- lm(MPAS ~ Trat,
data = controle)
anova(mf1)
summary(mf1)
View(controle)
#Primeiro precisa agrupar as duas replicatas em um único dado, pegando a média deles
controle_trat_MPAS <- controle |>
group_by(Trat, MPAS) |>
summarise(mean_MPAS = mean(MPAS))
View(controle_trat_MPAS)
mf1
check_normality(mf1)
check_heteroscedasticity(mf1)
plot(simulateResiduals(mf1))
hist(mf1$residuals)
check_normality(mf1)
check_heteroscedasticity(mf1)
plot(simulateResiduals(mf1))
mf_mpas1 <- emmeans(mf1, ~Trat)
cld(mf_mpas1)
plot(cld(mf_mpas1))
cld(mf_mpas1)
cld(mf_mpas1, adjust = "tukey")
cld(mf_mpas1)
mf2 <- lm(MRF ~ Trat*factor(Dose),
data = controle)
anova(mf2)
summary(mf2)
mf21 <- lm(MRF ~ Trat,
data = controle)
anova(mf21)
plot(simulateResiduals(mf21))
check_normality(mf22)
check_normality(mf21)
check_heteroscedasticity(mf21)
check_normality(mf21)
b21 <- boxcox(lm(controle$MRF+0.1 ~ 1))
lambda21 <- b21$x[which.max(b21$y)]
lambda21
controle$MRF21 <- (controle$MRF ^ lambda21 - 1)/ lambda21
controle$MRF21
mf2.boxcox <- lm(MRF21 ~ Trat,
data = controle)
anova(mf2.boxcox)
summary(mf2.boxcox)
plot(simulateResiduals(mf2.boxcox))
check_normality(mf2.boxcox)
check_heteroscedasticity(mf2.boxcox)
mf21 <- lm(log(MRF) ~ Trat,
data = controle)
anova(mf21)
plot(simulateResiduals(mf21))
mf21 <- lm(sqrt(MRF) ~ Trat,
data = controle)
anova(mf21)
summary(mf21)
plot(simulateResiduals(mf21))
check_normality(mf21)
check_heteroscedasticity(mf21)
mf21 <- lm(MRF ~ Trat,
data = controle)
anova(mf21)
summary(mf21)
anova(mf2.boxcox)
mf_mrf2.1 <- emmeans(mf2.boxcox, ~Trat)
cld(mf_mrf2.boxcox)
cld(mf_mrf2.1)
plot(cld(mf_mrf2.1))
mf22 <- lm(MRF ~ factor(Dose),
data = controle)
anova(mf22)
plot(simulateResiduals(mf22))
check_normality(mf22)
check_heteroscedasticity(mf22)
mf_mrf2.2 <- emmeans(mf22, ~Dose)
cld(mf_mrf2.2)
controle |>
ggplot(aes(log(Dose)+0.5, ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
#Transformação por Box-Cox
b <- boxcox(lm(controle$ovos+0.1 ~ 1)) #A partir do "b" iremos extrair o lambda
lambda #O valor lambda será usado na transformação
lambda #O valor lambda será usado na transformação
lambda <- b$x[which.max(b$y)]
lambda #O valor lambda será usado na transformação
controle$ovos2 <- (controle$ovos ^ lambda - 1)/ lambda
controle$ovos2 #Depois de transformado, é feito os mesmos testes
controle |>
ggplot(aes(log(Dose)+0.5, ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
controle |>
ggplot(aes(log(Dose)+1, ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
controle |>
ggplot(aes(log(Dose+1), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
controle |>
ggplot(aes(log(Dose+0.5), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
controle |>
ggplot(aes(log(Dose+0.5), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(se = F)
controle |>
ggplot(aes(log(Dose+1), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
controle |>
ggplot(aes(log(Dose+1), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(se = F)
controle |>
ggplot(aes(log(Dose+1), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F) #se = F tira a banda de confiança
controle |>
ggplot(aes(log(Dose+1), ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(se = F)
controle |>
ggplot(aes(Dose, ovos2))+
geom_point()+
geom_smooth(method = lm, se = FALSE,
formula = y ~poly(x,2))+ #Formula par ajustar os dados, modelo quadrático
geom_smooth(method = lm, se = F, color = "red") #Modelo linear
controle |>
ggplot(aes(log(Dose+1), ovos2))+
geom_point()+
geom_smooth(method = lm, se = FALSE,
formula = y ~poly(x,2))+ #Formula par ajustar os dados, modelo quadrático
geom_smooth(method = lm, se = F, color = "red") #Modelo linear
#Primeira ordem - modelo linear
lm1 <- lm(ovos2 ~ Dose,
data = controle)
summary(lm1)
#Segunda ordem ou quadrático - modelo quadrático
lm1.2 <- lm(ovos2 ~ Dose + Dose2,
data = controle)
#Gráfico dos modelos com o valor de R-quadrado
with(trat1, polynomial(log(Dose+0.5), ovos2, grau = 1))
#Gráfico dos modelos com o valor de R-quadrado
with(controle, polynomial(log(Dose+0.5), ovos2, grau = 1))
with(controle, polynomial(log(Dose+0.5), ovos2, grau = 2)) #diferente do AIC, deu maior que o linear
with(controle, polynomial(log(Dose+0.5), ovos2, grau = 3)) #R2 = 1, teoricamente melhor, mas superestima o número de ovos
mf3 <- lm(ovos ~ Trat*factor(Dose),
data = controle)
anova(mf3)
mf31 <- lm(ovos ~ factor(Dose),
data = controle)
anova(mf31)
plot(simulateResiduals(mf31))
check_normality(mf31)
check_heteroscedasticity(mf31)
mf_ovos3 <- emmeans(mf31, ~Dose)
cld(mf_ovos31)
cld(mf_ovos3)
plot(cld(mf_ovos3))
mf4 <- lm(ovosg ~ Trat*factor(Dose),
data = controle)
anova(mf4)
plot(simulateResiduals(mf4))
check_normality(mf4)
check_heteroscedasticity(mf4)
b2 <- boxcox(lm(controle$ovosg+0.1 ~ 1))
lambda2 <- b2$x[which.max(b2$y)]
lambda2
controle$ovosg2 <- (controle$ovosg ^ lambda2 - 1)/ lambda2
controle$ovosg2
mf4.1 <- lm(ovosg2 ~ Trat*factor(Dose),
data = controle)
anova(mf4.1)
summary(mf4.1)
anova(mf4.1)
check_normality(mf4.1)
check_heteroscedasticity(mf4.1)
mf_ovosg <- emmeans(mf4.1, ~ Trat|Dose)
cld(mf_ovosg)
mf_ovosg2 <- emmeans(mf4.1, ~Dose|Trat)
cld(mf_ovosg2)
anova(mf21)
controle |>
ggplot(aes(Dose, ovos2))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F)
check_normality(mf31)
check_heteroscedasticity(mf31)
controle |>
ggplot(aes(Dose, ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F)
controle |>
ggplot(aes(log(Dose+0.5), ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F)
controle |>
ggplot(aes(Dose, ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F)
controle |>
ggplot(aes(log(Dose+0.5), ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = "lm", se = F)
controle |>
ggplot(aes(log(Dose+0.5), ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(se = F)
controle |>
ggplot(aes(log(Dose+0.5), ovos))+
geom_point()+
geom_smooth(method = lm, se = FALSE,
formula = y ~poly(x,2))+
geom_smooth(method = lm, se = F, color = "red")
controle |>
ggplot(aes(log(Dose+0.5), ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(method = lm, se = FALSE,
formula = y ~poly(x,2))+
geom_smooth(method = lm, se = F, color = "red")
controle |>
ggplot(aes(log(Dose+0.5), ovos))+
geom_jitter(width = 0.1, color = "gray")+
stat_summary(fun.data = "mean_cl_boot", color = "blue")+
geom_smooth(se = F)
controle$Dose2 <- controle$Dose^2
controle1$Dose3 <- controle$Dose^3
controle$Dose3 <- controle$Dose^3
#Primeira ordem - modelo linear
lm1 <- lm(ovos ~ log(Dose+0.5),
data = controle)
summary(lm1)
#Segunda ordem ou quadrático - modelo quadrático
lm1.2 <- lm(ovos ~ log(Dose+0.5) + log(Dose2+0.5),
data = controle)
summary(lm1.2)
#COmparação dos 3 modelos (menor valor = melhor modelo)
AIC(lm1) #Menor valor
AIC(lm1.2)
#Gráfico dos modelos com o valor de R-quadrado
with(controle, polynomial(log(Dose+0.5), ovos, grau = 1))
with(controle, polynomial(log(Dose+0.5), ovos, grau = 2)) #diferente do AIC, deu maior que o linear
#Segunda ordem ou quadrático - modelo quadrático
lm1.2 <- lm(ovos ~ log(Dose+0.5) + log(Dose2+0.5),
data = controle)
summary(lm1.2)
with(controle, polynomial(log(Dose+0.5), ovos, grau = 3)) #R2 = 1, teoricamente melhor, mas superestima o número de ovos
summary(lm1.2)
with(controle, polynomial(log(Dose+0.5), ovos, grau = 2)) #diferente do AIC, deu maior que o linear
#Gráfico dos modelos com o valor de R-quadrado
with(controle, polynomial(log(Dose+0.5), ovos, grau = 1))
summary(lm1)
#Gráfico dos modelos com o valor de R-quadrado
with(controle, polynomial(log(Dose+0.5), ovos, grau = 1))
library(drc)
drc1 <- drm(ovos ~ log(Dose+0.5), data = controle,  #drm é uma função que ajusta modelo não-linear
fct = LL.3()) #LL.3 = log-logistic de 3 parâmetros
drc1 <- drm(ovos ~ log(Dose), data = controle,  #drm é uma função que ajusta modelo não-linear
fct = LL.3()) #LL.3 = log-logistic de 3 parâmetros
drc1 <- drm(ovos ~ Dose, data = controle,  #drm é uma função que ajusta modelo não-linear
fct = LL.3()) #LL.3 = log-logistic de 3 parâmetros
AIC(drc1) #Para comparar diferentes modelos (fct), o W1.3 pode ser melhor para alguns isolados
#COmparação dos 3 modelos (menor valor = melhor modelo)
AIC(lm1) #Menor valor
plot(drc1) #Para visualizar se o ajuste está bom
with(controle, polynomial(log(Dose+0.5), ovos, grau = 2)) #diferente do AIC, deu maior que o linear
with(controle, polynomial(log(Dose+0.5), ovos, grau = 1))
with(controle, polynomial(log(Dose+0.5), ovos, grau = 2))
